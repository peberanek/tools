#!/usr/bin/env python3
"""TODO: describe me!"""

import subprocess
from calendar import TextCalendar
from datetime import date, datetime, timedelta
from string import Template

# imported via venv or as a user-specific pkg (`pip install --user ...`)
import holidays  # pylint: disable=import-error


class HighlightedTextCalendar(TextCalendar):
    """Text calendar highlighting the current day.

    By default, calendar.TextCalendar doesn't have the current date highlighted.
    Inspired by: https://stackoverflow.com/a/71615715
    """

    def formatday(self, day, weekday, width):
        # Disabling pylint invalid-name check: `s` is naming convention in TextCalendar
        s = super().formatday(day, weekday, width)  # pylint: disable=invalid-name
        if day == datetime.today().day:
            s = f"\033[7m{s}\033[0m"  # pylint: disable=invalid-name
        return s


def report_holidays(in_days):
    """Print ongoing holidays in the next in_days days."""
    watchlist = [
        holidays.CZ(),
        holidays.UK(),
        holidays.US(),
        holidays.AU(),  # Australia
        holidays.JP(),
    ]

    found_holiday = False
    for country_holidays in watchlist:
        # Find and report holidays in the ongoing week (7 days), including today
        for day in range(in_days + 1):
            date_in_question = date.today() + timedelta(days=day)
            if date_in_question in country_holidays:
                found_holiday = True
                print(
                    f"{date_in_question} is holiday in {country_holidays.country}:",
                    country_holidays.get(date_in_question),
                )
    if not found_holiday:
        print("none")


def report_events(in_days):
    """Print important ongoing events in the next 7 days."""
    events = {
        "2022-06-10": "US: CPI data",
        "2022-06-15": "US: FOMC w/Projections (Possible start of QT)",
        "2022-07-06": "US: CPI data",
        "2022-07-13": "US: CPI data",
        "2022-07-27": "US: FOMC",
        # ETH 2.0
        "2022-08-10": "US: CPI data",
        "2022-09-13": "US: CPI data",
        "2022-09-21": "US: FOMC w/Projections",
        # China: 20th Party Congress (President Xi 3rd term)
        "2022-11-02": "US: FOMC",
        "2022-11-10": "US: CPI data",
        "2022-12-13": "US: CPI data",
        "2022-12-14": "US: FOMC w/Projections",
    }

    found_event = False
    for day in range(in_days + 1):
        date_in_question = date.today() + timedelta(days=day)
        date_in_question = date_in_question.isoformat()
        if date_in_question in events:
            found_event = True
            print(f"{date_in_question}: {events[date_in_question]}")
    if not found_event:
        print("none")


def main():
    """Main entry point"""
    today = datetime.today()
    days = 7

    print()
    print(HighlightedTextCalendar().formatmonth(today.year, today.month))

    print(f"Ongoing events in next {days} day(s):")
    report_events(days)
    print()

    print(f"Ongoing holidays in next {days} day(s):")
    report_holidays(days)
    print()

    # print local and UTC time
    print("Time:")
    # FIXME: using subprocess is dirty. Implement it via Python.
    print(
        subprocess.run(
            ["date", "+%T %Z"], capture_output=True, check=True
        ).stdout.decode("utf-8"),
        end="",
    )
    time_utc = subprocess.run(
        ["date", "--utc", "+%T %Z"], capture_output=True, check=True
    ).stdout.decode("utf-8")
    print(time_utc)

    t_sessions_schedule = Template(
        """
-------------------------------------------------------------------------
$hours_row
-------------------------------------------------------------------------
|  |  |==========London==========|  |  |  |  |  |  |  |  |  |  |  |  |  |
|  |  |  |  |  |  |  |=========New York=========|  |  |  |  |  |  |  |  |
|==|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |=========Sydney========|
|========|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |======Tokyo======|
-------------------------------------------------------------------------
"""
    )

    # Highlight current time (UTC)
    hours_row = (
        "| 6| 7| 8| 9|10|11|12|13|14|15|16|17|18|19|20|21|22|23|24| 1| 2| 3| 4| 5|"
    )
    hour_utc: str = time_utc.split(":")[0]
    new_hours_row = "|"
    for num in hours_row[1:-1].split(
        "|"
    ):  # the first and the last '|' would produce empty str
        if int(num) == int(hour_utc):
            num = f"\033[7m{num}\033[0m"
        new_hours_row += num + "|"
    hours_row = new_hours_row

    print("World Trading Sessions (in GMT):", end="")
    print(t_sessions_schedule.substitute(hours_row=hours_row), end="")


if __name__ == "__main__":
    main()

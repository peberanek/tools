#!/usr/bin/env python3
"""TODO: describe me!"""

import subprocess
from calendar import TextCalendar
from datetime import date, datetime, timedelta

# imported via venv or as a user-specific pkg (`pip install --user ...`)
import holidays  # pylint: disable=import-error


class HighlightedTextCalendar(TextCalendar):
    """Text calendar mimicking output of the UNIX `date` command.

    By default, calendar.TextCalendar doesn't have the current date highlighted.
    Copied from: https://stackoverflow.com/a/71615715
    """

    def __init__(self, day_to_highlight=-1):
        super().__init__()
        self._day_to_highlight = day_to_highlight

    def formatday(self, day: int, weekday: int, width: int) -> str:
        s = super().formatday(day, weekday, width)
        if day == self._day_to_highlight:
            s = f"\033[7m{s}\033[0m"
        return s


# TODO: Implement me
class TestTextCalendar(TextCalendar):
    """Cleaner implementation of HighlightedTextCalendar"""

    def __init__(self, firstweekday: int = ...) -> None:
        super().__init__(firstweekday)


def report_holidays():
    """Print ongoing holidays in the next 7 days."""
    watchlist = [
        holidays.CZ(),
        holidays.UK(),
        holidays.US(),
        holidays.AU(),  # Australia
        holidays.JP(),
    ]

    found_holiday = False
    for country_holidays in watchlist:
        # Find and report holidays in the ongoing week (7 days), including today
        days = 7
        for day in range(days + 1):
            date_in_question = date.today() + timedelta(days=day)
            if date_in_question in country_holidays:
                found_holiday = True
                print(
                    f"{date_in_question} is holiday in {country_holidays.country}:",
                    country_holidays.get(date_in_question),
                )
    if not found_holiday:
        print(f"No holiday in next {days} days.")


def main():
    """Main entry point"""
    today = datetime.today()
    year = today.year
    month = today.month
    day = today.day

    print()
    print(HighlightedTextCalendar(day_to_highlight=day).formatmonth(year, month))

    # TODO: show ongoing events (e.g. from 'odpalovaci kalendar')

    print("Ongoing holidays:")
    report_holidays()

    print()
    # FIXME: using subprocess is dirty. Implement it via Python.
    # print local and UTC time
    print(
        subprocess.run(
            ["date", "+%T %Z"], capture_output=True, check=True
        ).stdout.decode("utf-8"),
        end="",
    )
    print(
        subprocess.run(
            ["date", "--utc", "+%T %Z"], capture_output=True, check=True
        ).stdout.decode("utf-8")
    )

    t_sessions_schedule = """
-------------------------------------------------------------------------
| 6| 7| 8| 9|10|11|12|13|14|15|16|17|18|19|20|21|22|23|24| 1| 2| 3| 4| 5|
-------------------------------------------------------------------------
|  |  |==========London==========|  |  |  |  |  |  |  |  |  |  |  |  |  |
|  |  |  |  |  |  |  |=========New York=========|  |  |  |  |  |  |  |  |
|==|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |=========Sydney========|
|========|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |======Tokyo======|
-------------------------------------------------------------------------
"""
    print("World Trading Sessions (in GMT):", end="")
    print(t_sessions_schedule, end="")


if __name__ == "__main__":
    main()

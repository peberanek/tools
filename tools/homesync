#!/bin/python3
"""Rsync wrapper for syncing contents of $HOME with a destination directory.

notes:
  If the destination directory does not exist, it is created automatically.
"""  # noqa: D405
from __future__ import annotations

import argparse
import subprocess
import sys
from pathlib import Path


def run_rsync(dest_dir: Path, exclude_from: Path | None = None) -> int:
    """Sync contents of $HOME with the dest_dir.

    Args:
        dest_dir (Path): path to a destination dir
        exclude_from (Path): path to a file with rsync exclude patterns

    Side effects:
        * Syncs contents of $HOME with the dest_dir via rsync.
        * Prints to stdout or stderr.

    Returns:
        int: 0 if sync was successful, 1 otherwise.
    """
    rsync_cmd = ["rsync", "--verbose", "--archive", "--human-readable", "--delete"]
    if exclude_from:
        rsync_cmd.extend(["--exclude-from", str(exclude_from), "--delete-excluded"])
    rsync_cmd.extend(
        [
            # Trailing slash prevents creating additional directory level 'home'
            # in dest_dir
            str(Path.home()) + "/",
            str(dest_dir),
        ]
    )
    try:
        subprocess.run(rsync_cmd, check=True, shell=False)  # noqa: S603
    except subprocess.CalledProcessError as exc:
        print(exc, file=sys.stderr)  # noqa: T201
        return 1
    return 0


def main() -> int:  # noqa: D103
    parser = argparse.ArgumentParser(
        description=__doc__, formatter_class=argparse.RawDescriptionHelpFormatter
    )
    parser.add_argument("dest_dir", type=Path, help="destination directory")
    parser.add_argument(
        "--exclude-from",
        type=Path,
        help="read rsync exclude patterns from FILE",
        metavar="FILE",
    )
    args = parser.parse_args()
    return run_rsync(args.dest_dir, args.exclude_from)


if __name__ == "__main__":
    sys.exit(main())

#!/usr/bin/env python3

"""Easily download images from medik-tedik.cz.

By default, images are downloaded into $HOME/Downloads.

For usage details, see `medik-tedik-dl --help`.
"""

import argparse
import os
import pathlib
import re
import sys
import urllib.parse
import urllib.request
from html.parser import HTMLParser

# HTMLParser: Abstract method _markupbase.ParserBase.error() has been removed in
# Python 3.10.
# pylint: disable=abstract-method


class MedikTedikGalleryParser(HTMLParser):
    """Parse a gallery web page from medik-tedik.cz.

    Due to invalid (likely handmade) markup it is difficult to parse it
    by e.g. xml.etree.ElementTree.
    """

    def __init__(self, *, convert_charrefs: bool = ...) -> None:
        super().__init__(convert_charrefs=convert_charrefs)
        self.in_date_div = False
        self.in_gallery_div = False
        self.gallery_content = {"date": "", "urls": []}

    def handle_starttag(self, tag, attrs):
        if tag == "div" and attrs:
            if attrs[0][0] == "class" and attrs[0][1] == "galerie":
                self.in_gallery_div = True
            elif attrs[0][0] == "id" and attrs[0][1] == "pata":
                self.in_gallery_div = False
            elif attrs[0][0] == "class" and attrs[0][1] == "rokh":
                self.in_date_div = True
        if (
            self.in_gallery_div
            and tag == "a"
            and attrs
            and (attrs[0][0] == "class" and attrs[0][1] == "cell")
        ):
            # A valid URL must not contain contain control characters, e.g. a whitespace.
            # urllib.parse.quote should resolve this issue.
            self.gallery_content["urls"].append(
                "http://www.medik-tedik.cz/" + urllib.parse.quote(attrs[1][1])
            )

    def handle_data(self, data):
        if self.in_date_div and re.match(r"^\d{4}-\d{2}-\d{2}$", data):
            self.gallery_content["date"] = data
            self.in_date_div = False


def error(msg):
    """Format and print msg into STDERR."""
    print(f"error: {msg}", file=sys.stderr)


def main():
    """Main entry point"""

    parser = argparse.ArgumentParser()
    parser.add_argument(
        "gallery_url",
        help="full gallery URL, e.g. http://www.medik-tedik.cz/index.php?foto=202201",
    )
    parser.add_argument(
        "img_number", help="number of the requested image, e.g. 1", type=int
    )
    parser.add_argument(
        "-d",
        "--dest-dir",
        help="optional destination directory where to save images, default: ~/Downloads",
        type=pathlib.Path,
        default=f"{os.getenv('HOME')}/Downloads",
    )
    parser.add_argument(
        "-v",
        "--verbose",
        help="print more verbose output; useful for debugging",
        action="store_true",
    )
    args = parser.parse_args()

    if args.img_number < 1:
        error(f"image numbers start from 1; entered: {args.img_number}")
        sys.exit(1)
    if not args.dest_dir.exists():
        error(f"--dest-dir '{args.dest_dir}' does not exist.")
        sys.exit(1)

    if args.verbose:
        print("destination directory:", args.dest_dir)

    with urllib.request.urlopen(args.gallery_url) as response:
        html = response.read().decode("utf-8")

    parser = MedikTedikGalleryParser()
    parser.feed(html)
    parser.close()

    num_images_in_gallery = len(parser.gallery_content["urls"])
    if args.img_number > num_images_in_gallery:
        error(
            f"image number out of range; images in the gallery: {num_images_in_gallery};"
            " invalid URL?"
        )
        sys.exit(1)

    for num, url in enumerate(parser.gallery_content["urls"], start=1):
        if num == args.img_number:
            topic = re.search(
                r"fotogalerie/(atletika|priroda|ostatni)/\d{4}", url
            ).group(1)
            if not topic:
                error(f"invalid topic in image URL: {url}")
                sys.exit(1)
            img_ext = os.path.splitext(url)[1]
            date_str = parser.gallery_content["date"].replace("-", "")
            gallery_id = re.search(r"\?foto=(?P<id>\d*$)", args.gallery_url).group("id")
            if not gallery_id:
                error(f"cannot determine gallery ID for url: {url}")
                sys.exit(1)
            img_name = f"{date_str}_{gallery_id}_{args.img_number:03}{img_ext}"
            topic_dir = args.dest_dir / topic
            topic_dir.mkdir(exist_ok=True)
            file = topic_dir / img_name

            if args.verbose:
                print("saving image as:", file)
            with urllib.request.urlopen(url) as response:
                file.write_bytes(response.read())

            break


if __name__ == "__main__":
    main()
